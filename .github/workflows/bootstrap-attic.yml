# GHA backed attic server for nix binary caches
# This workflow does something weird and crazy
# - It builds attic and runs it and exposes it in a cloudflare tunnel
# -- * Then one can use that url as a substitutor and install attic
# -- * This can be extended to build anything and expose it via attic
# - Why not use cachix? good question, maybe because it is not oss
# - Also caches nix store in github actions cache
# TODO:
# other whacky ideas
# - push to a list of minio backed private attic servers
#   without exposing their endpoints (github secrets)
# - seems like attic is not required, detsys magic cache runs a server it can be used
#   so, attic need not be run. But this is at the mercy of github and detsys
# - never mind, attic or something is required, because magic-cache doesn't sign packages
#   and public key is not known
# - so running a nix-serve with temporary private/public keypair

on:
  workflow_dispatch:

jobs:
  buildattic:
    name: Build attic
    runs-on: ubuntu-latest
    steps:
        # enables flakes, nix-command, sets runner as trusted user
      - uses: DeterminateSystems/nix-installer-action@v12
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: setup attic-ci as a trusted substitutor
        run: |
          echo 'trusted-substituters = https://staging.attic.rs/attic-ci https://cache.nixos.org' | sudo tee -a /etc/nix/nix.conf
          echo 'trusted-public-keys = attic-ci:U5Sey4mUxwBXM3iFapmP0/ogODXywKLRNgRPQpEXxbo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=' | sudo tee -a /etc/nix/nix.conf
      - run: nix profile install nixpkgs#cloudflared
      - name: build and install attic
        run: |
          nix build -L https://github.com/zhaofengli/attic/tarball/main
          nix profile install https://github.com/zhaofengli/attic/tarball/main
      # optionally configure a fixed cloudflare tunnel endpoint (requires login)
      # - name: configure cloudflare tunnel endpoint
      - name: keypair for nix-serve
        run: |
          nix-store --generate-binary-cache-key gha-magic-cache-1 cache-priv-key.pem cache-pub-key.pem
          cat cache-pub-key.pem
          export NIX_SECRET_KEY_FILE=$PWD/cache-priv-key.pem
          nix run nixpkgs#nix-serve -- --listen :5000 --daemonize 2>&1 >/dev/null
      - name: expose nix-serve server
        run: |
          cloudflared tunnel --url http://localhost:5000 > cloudflared.log 2>&1 &
        # run: |
        #   atticd -l 127.0.0.1:3344
        #   attic login local http://localhost:3344
        #   attic cache create local:atticcache --public
        #   attic push local:atticcache $(which attic)
      # crazy thing, magic-nix-cache runs on top of attic
      # - name: Debugging with browser
      #   uses: fawazahmed0/action-debug@v2
      # https://sourcegraph.com/github.com/osdev-wiki/wiki/-/blob/.github/workflows/sitegen.yml?L43:13-43:25
      - name: cache dependency builds
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/nix/*sqlite*
          key: ${{ runner.os }}
      - name: wait for 30min
        shell: bash
        run: |
          time_left=$((30*60))
          while [ $time_left -gt 0 ]
          do
            echo "WF exits in $((time_left/60))m $((time_left%60))s"
            ls
            pwd
            ls -l
            cat cloudflared.log | grep -E 'https.*trycloudflare.com'
            sleep 5
            cat cloudflared.log | grep -E 'https.*trycloudflare.com'
            sleep 5
            ((time_left=time_left-10))
          done
